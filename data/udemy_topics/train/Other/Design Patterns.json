{
    "selfpaced": true, 
    "topic_name": [
        "IT & Software"
    ], 
    "description": "<p style=\"\">  \tDesign patterns are powerful, predefined solutions to common software design problems. Patterns provide a powerful form of reuse because they are transportable across different languages and software architectures. This seminar introduces and explains the highest-leverage design patterns in a clear way that&#039;s easy to understand. You will learn how to use specific design patterns to improve your designs, and you will practice applying design patterns to sample design problems. You will also see how design patterns can improve your design process overall.  </p>  <p style=\"\">  \t<strong style=\"\">Course Details</strong>  </p>  <p style=\"\">  \tFundamental Design Principles  </p>  <ul style=\"\">  \t<li style=\"\">Manage coupling and cohesion</li>  \t<li style=\"\">Prefer association to inheritance</li>  \t<li style=\"\">Encapsulate what varies</li>  \t<li style=\"\">Information hiding</li>  \t<li style=\"\">Separate creation and usage</li>  \t<li style=\"\">Identify abstractions</li>  \t<li style=\"\">Delay binding times</li>  \t<li style=\"\">Design to interfaces</li>  \t<li style=\"\">Design to contracts</li>  \t<li style=\"\">Principle of least knowledge</li>  \t<li style=\"\">Design for evolution</li>  \t<li style=\"\">Design for testability</li>  </ul>  <p style=\"\">  \tThe Patterns ...  </p>  <p style=\"\">  \tAbstract Factory  </p>  <ul style=\"\">  \t<li style=\"\">Specify object creation with an interface</li>  \t<li style=\"\">Create families of factory methods</li>  \t<li style=\"\">Allocate responsibility for instance creation to a service</li>  \t<li style=\"\">Keep the client ignorant of instantiation details while maintaining conformance to a contract</li>  </ul>  <p style=\"\">  \tAdapter  </p>  <ul style=\"\">  \t<li style=\"\">Convert between interfaces</li>  \t<li style=\"\">Reuse services</li>  \t<li style=\"\">Class Adapter uses inheritance</li>  \t<li style=\"\">Object Adapter uses association</li>  \t<li style=\"\">Reduce the coupling between a client and its dependencies</li>  </ul>  <p style=\"\">  \tBridge  </p>  <ul style=\"\">  \t<li style=\"\">Decouple an abstract specification from any particular implementation</li>  \t<li style=\"\">Enable late and dynamic binding between components</li>  \t<li style=\"\">Specify collaborations using interfaces and contracts</li>  \t<li style=\"\">Enable substitution of different implementations</li>  \t<li style=\"\">Enable reuse of implementations among different clients</li>  </ul>  <p style=\"\">  \tCommand  </p>  <ul style=\"\">  \t<li style=\"\">Encapsulate a service request as an object</li>  \t<li style=\"\">Parameterize methods for consistency</li>  \t<li style=\"\">Dynamically specify and sequence methods with structure</li>  \t<li style=\"\">Reduce complexity of code by reducing branching logic</li>  \t<li style=\"\">Specify flexible workflows as data structures</li>  \t<li style=\"\">Maintain action history</li>  \t<li style=\"\">Implement &#039;Undo&#039;</li>  </ul>  <p style=\"\">  \tDecorator  </p>  <ul style=\"\">  \t<li style=\"\">Dynamically augment an objectâ€™s behavior</li>  \t<li style=\"\">Aggregate several effects into a single behavior</li>  \t<li style=\"\">Replace complicated branching logic with flexible data structures</li>  \t<li style=\"\">Encapsulate behavioral variations behind a unified interface</li>  </ul>  <p style=\"\">  \tDependency Injection  </p>  <ul style=\"\">  \t<li style=\"\">Maintain loose coupling between a component and its dependencies</li>  \t<li style=\"\">Re-assign responsibility for object instantiation</li>  \t<li style=\"\">Inject flexibility into the design</li>  \t<li style=\"\">Simplify testing</li>  </ul>  <p style=\"\">  \tFactory Method  </p>  <ul style=\"\">  \t<li style=\"\">Create polymorphic methods for object creation</li>  \t<li style=\"\">Delegate responsibility for object construction</li>  \t<li style=\"\">Isolate instantiation logic</li>  \t<li style=\"\">Enable &#039;pre-packaged&#039; default configurations</li>  \t<li style=\"\">Reduce coupling to rigid constructor methods</li>  \t<li style=\"\">Afford interface variation while maintaining implementation consistency</li>  </ul>  <p style=\"\">  \tProxy  </p>  <ul style=\"\">  \t<li style=\"\">Inject new behavior without altering the interface</li>  \t<li style=\"\">Encapsulate &#039;orthogonal&#039; behavior</li>  \t<li style=\"\">Encapsulate &#039;non-functional&#039; enhancements and optimizations</li>  \t<li style=\"\">Robustly utilize remote services</li>  </ul>  <p style=\"\">  \tState  </p>  <ul style=\"\">  \t<li style=\"\">Simplify implementation of a state machine</li>  \t<li style=\"\">Allow objects to respond differently according to internal state</li>  \t<li style=\"\">Allow responsibilities and states to evolve with minimal effort</li>  \t<li style=\"\">Reduce branching logic</li>  \t<li style=\"\">Reduce number of components required to perform a service</li>  </ul>  <p style=\"\">  \tStrategy  </p>  <ul style=\"\">  \t<li style=\"\">Isolate changeable characteristics to avoid combinatorial explosion of configurations</li>  \t<li style=\"\">Interchange behaviors among components</li>  \t<li style=\"\">Increase cohesion by delegating specific responsibilities</li>  \t<li style=\"\">Allow configurations to evolve with minimal effort</li>  \t<li style=\"\">Reduce cost of testing</li>  </ul>  <p style=\"\">  \tTemplate Method  </p>  <ul style=\"\">  \t<li style=\"\">Fix a sequence of behaviors while allowing each step to vary</li>  \t<li style=\"\">Allow alternate algorithms to conform to the same contract</li>  \t<li style=\"\">Enforce constraints in one place</li>  \t<li style=\"\">Simplify verification of behavior</li>  </ul>", 
    "end_date": null, 
    "title": "Design Patterns", 
    "price": "50.00", 
    "instructors": "Construx Software", 
    "commitment": "3 hours", 
    "cover_url": "https://udemy-images.udemy.com/course/750x422/330996_cace_2.jpg", 
    "course_url": "https://www.udemy.com/construx-design-patterns/", 
    "currency": "USD", 
    "subject_name": [
        "Other"
    ], 
    "duration": null, 
    "language_name": [
        "English"
    ], 
    "provider_name": [
        "udemy"
    ], 
    "start_date": "2014-10-29T21:11:01Z"
}