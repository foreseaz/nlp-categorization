{
    "selfpaced": true, 
    "topic_name": [
        "Development"
    ], 
    "description": "<p><strong></strong><strong>A Revolution On Your Wrist !</strong></p><p>The worlds largest company with a valuation of almost One Trillion Dollars, continues to amaze everyone.</p><p>Apple never ceases to impress averyone with their incredible vision to come up with game-changers that literally dominate and spawn a whole new industry and eco-systems.</p><p><em>And this time, its in the wearables industry.</em></p><p>With the introduction of the Apple Watch, Apple stands to disrupt and revolutionize the smartwatch wearables industry. Reports have confirmed that Apple has manufactured and plans to sell over 15 million AppleWatch's in its initial launch in mid-April 2015.</p><p><strong>So, if you're making Mobile Apps - this is potentially a MASSIVE opportunity for you!</strong></p><p>As with all new technologies, <em>those who move first</em> and adapt rapidly get the <strong>early-mover advantage</strong>. Those who don't, are left behind trying to play the catch-up game.</p><p>Fortunately and unfortunately, thats the reality of how technology evolves and works. Getting in early helps you get initial traction faster than late comers, and lets you dominate your app niches quickly.</p><p>By learning Apple WatchKit development, you are literally opening up the doors to <strong>massive opportunuities</strong> for you as a developer.</p><p>And, because this really is \"new\" territory behind which <strong>Apple is putting all its might and magic</strong> - the size of the opportunity stands to mushroom into unprecendented dimensions.</p><p><strong>The questions you should be asking yourself are...</strong></p><p>- Am I bold and fast enough to seize this opportunity?</p><p>- Do I want to have a shot at making the next wildly successful Apple Watch App?</p><p>- Do I want to share similar successes of the makers of FlappyBird, Angry Birds and the likes?</p><p><strong>The Apple WatchKit Framework and Development Environment</strong></p>Apple Watch gives developers an opportunity to interact with users in an entirely new way.<p>Apple Watch development is fairly simple, thanks to the WatchKit Framework and the new version of Xcode.</p><p>Adding a WatchKit extension to an existing app is a simple matter of adding a WatchKit target to the app. You may also create a new app and add a WatchKit extension immediately.</p><p><strong>A WatchKit App is organized into three parts </strong></p><ul><li>the app that runs on iPhone distinct from the watch environment,</li><li>the WatchKit app itself, which exists only on the watch, and contains storyboards but no code,</li><li>the WatchKit extension, which runs on the iPhone and contains the controllers for the watch app. The extension also communicates between the phone app and the watch app.</li></ul><strong>There are three types of things which may be displayed on the watch</strong><ul><li>A WatchKit application, which presents an interface to an iPhone app to the user</li><li>A Glance, which is a single simple screen of information presented to the user by the app.</li><li>Notifications, which can be sent to the user's watch from an app either in the foreground or background state.</li></ul><p>In our Apple WatchKit Essential Training course, we cover all three of these in great detail.</p><p><strong>How The Apple WatchKit is Different...</strong></p>Even though the watch app itself <strong>runs no code</strong>, the watch contains a <em>reasonably full set of hardware devices</em>, such as an <strong>accelerometer</strong>, <strong>gyro-meter</strong>, and a <strong>heartbeat sensor</strong>.<p>Data from these devices can be sent to the iPhone app that hosts the watch app and is processed. By combining this data with the phone's Wifi or GPS and other sensor data, a complete picture can be gained of the user's location, current activity level, compass direction, and more.</p><p>Apple Watch also uses a completely new touch engine, which <strong>senses the force of a user's touch</strong> as well as the fact that the user is just touching the screen.</p><p>This might be used to develop code that handles a wider variety of touchscreen gestures, or brings up different information depending on now, not only where but <strong>how the screen is touched</strong>.</p><p>Of course, the screen the user is touching is a full retina display, which makes presenting high-quality interfaces in your apps a breeze.</p><p><strong>What You Will Learn</strong></p>This course teaches basic you need to <strong>develop compelling apps</strong> for Apple Watch using the <strong>WatchKit framework</strong> and the <strong>Swift programming language</strong>.<p><em>You will learn all of the following topics...</em></p><p><strong>Requirements and First Steps -</strong> Adding a WatchKit target to an existing iPhone app. The WatchKit environment, and the function of the Extension and WatchKit app itself. First steps in user interface development, including a HelloWatch app.</p><p><strong>The WatchKit interface - </strong>Pushing new interface controllers and presenting them modally, with and without segues. The context object and its role in communicating data. Getting input from the user. Communicating between the watch app and the iPhone app that hosts it. Table views on Apple Watch. We'll also discuss view groups as a way to manage the positioning of user interface controls.</p><p><em>This is the lite version of our main core course.</em></p><p><strong>Structure of the Course Units</strong></p>All the material in the course is presented at a very high level by necessity, and will help you get started and master all the essential concepts you need to know for Apple WatchKit development.<p><strong>[Unit 1] Requirements and First Steps.</strong></p><p>Adding a WatchKit target to an existing iPhone app. The WatchKit environment, and the function of the Extension and WatchKit app itself. First steps in user interface development, including a HelloWatch app.</p><p><strong>[Unit 2] The WatchKit interface.</strong></p><p>Part one of a discussion of WKInterfaceController (the main View Controller class used in WatchKit. Pushing new interface controllers and presenting them modaly, with and without segues. The context object and its role in communicating data.</p><p>We'll even look at how to <strong>develop code for the Apple Watch</strong>.</p><p>This is the next logical step after an introduction to iPhone development.</p><p><strong>Watch calculator:</strong> Just what you've been waiting forâ€¦ a calculator on your wrist! How to translate the calculator concept to the Apple Watch.</p><p></p><p><strong>Pre-Requisites</strong></p>In the course, we focus on how to develop watch apps, and we assume that you already have experience with iOS 8 and Swift.<p>If you do not know these technologies, a good place to learn them is from our Complete iOS 8 development with Swift course.</p>", 
    "end_date": null, 
    "title": "How to Make Apple WatchKit Apps for Beginners", 
    "price": "20.00", 
    "instructors": "EDUmobile Academy", 
    "commitment": "2 hours", 
    "cover_url": "https://udemy-images.udemy.com/course/750x422/565058_29bf.jpg", 
    "course_url": "https://www.udemy.com/how-to-make-apple-watchkit-apps-for-beginners/", 
    "currency": "USD", 
    "subject_name": [
        "Mobile Apps"
    ], 
    "duration": null, 
    "language_name": [
        "English"
    ], 
    "provider_name": [
        "udemy"
    ], 
    "start_date": "2015-07-26T11:10:02Z"
}