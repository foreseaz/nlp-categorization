{
    "selfpaced": true, 
    "topic_name": [
        "Development"
    ], 
    "description": "<p style=\"\">Have you ever wanted to update an app without resubmitting a new build to Apple? Have you ever wanted to dynamically display web pages in your app, each with the potential to contain embeds of YouTube videos, Vimeo video, Vine embeds, images, etc. Or have you ever thought about pulling in data from a web page into your app, perhaps with a little sprinkle of PHP? How to do all that and more awaits you in this latest iOS video tutorial series with Swift 1.2! </p><p style=\"\">Read the course curriculum below.</p><p style=\"\"><strong style=\"\">Initial Setup with Auto Layout</strong></p><p style=\"\">In this first video we will look at the initial layout of the app. This involves adding a UITableView, UIWebView and Navigation Bar to our Main storyboard file. If you have no interest in learning (or relearning Auto-Layout) than this lesson is completely skippable and you can download the starting project, with the layout already included.</p><p style=\"\"><strong style=\"\">Displaying a Web View and Parsing the Property List</strong></p><p style=\"\">In these next video tutorials we will connect our IBOutlets and IBActions, make our first web request (display any site/page you want in the app), do a quick parse of the Property List, then fully parse the property list and feed all of our data into a UITable. The data is sub-sectioned so for example, we will click on a broad section of data (like Topics), then click another section (like Courses), then choose from links within that section (for example, a specific Lesson to view). This setup can be used for any kind of data.</p><p style=\"\"><strong style=\"\">Sending Query String Variables from the App and Receiving HTML Data Back</strong></p><p style=\"\">In this video tutorials we will learn how to send query string variables from an iOS app and use them within the content shown in our UIWebView. So for example, we might open a webpage like….video_player?id=12345 , where the page then displays a YouTube or Vimeo embed with the ID of 12345. So using this method your Property List can open a single page and feed in countless variables for different links, or information of any sort. Along with that we can include custom titles within the app based on what we&#039;re displaying. We will also experiment with reading data back in from a webpage (without actually showing it). So for example, this could be used to act as a kind of gateway within the app, if a particular webpage&#039;s content displayed the word “no&quot;, then the app wouldn&#039;t allow a particular set of functionality. Or this could just be used to display the “message of the day&quot; . Finally we will setup a back button so users can reverse back up the Property List data in the UITableView.</p><p style=\"\"><strong style=\"\">Updating the Property List from a copy stored on your website</strong></p><p style=\"\">In these next videos we mostly deal with an optional add on to the course which involves uploading a second copy of the Property List to a server and making the app use it as the primary source of data. If that Property List is unreachable, the app will fallback to checking on a locally saved version of that updated property list, and if that fails, the app will resort to using the original Property List submitted with the bundle to the App Store.</p><p style=\"\"><strong style=\"\">Adding Thumbnail Images to the UITableView</strong></p><p style=\"\">This video tutorial teaches how to include an image (of any size) in the UITableView to make for an obviously more eye-popping visual experience to a normal list-only table view. The property list can define either an image in the main app bundle, or an image stored on a server (both can be used in the same table). We will then write the code to load either. If an image stored at a URL is defined, we will cache that image, so after the initial load, our UITableView loads only the cached version. Creating an image cache sounds fancy but it is simply a mutable dictionary (which is useful for many projects!)</p>", 
    "end_date": null, 
    "title": "Property List Driven Apps with Swift", 
    "price": "20.00", 
    "instructors": "Justin Dike", 
    "commitment": "3 hours", 
    "cover_url": "https://udemy-images.udemy.com/course/750x422/512392_66a5.jpg", 
    "course_url": "https://www.udemy.com/property-list-driven-apps-with-swift/", 
    "currency": "USD", 
    "subject_name": [
        "Mobile Apps"
    ], 
    "duration": null, 
    "language_name": [
        "English"
    ], 
    "provider_name": [
        "udemy"
    ], 
    "start_date": "2015-05-27T01:24:30Z"
}