{
    "selfpaced": true, 
    "topic_name": [
        "Development"
    ], 
    "description": "<p><strong class=\"redactor-inline-converted\">UPDATE:</strong><strong> Jetzt mit 16 Apps als praxisnahe Beispiele!</strong></p>\n\n<p>Dieser Online-Kurs ist mit <strong class=\"redactor-inline-converted\">28 Stunden Inhalt</strong> einer der umfassendsten Referenzen für die iOS App Entwicklung im deutschsprachigen Markt. Mit über <strong class=\"redactor-inline-converted\">7.400 Teilnehmern </strong>gehört er mit zu den erfolgreichsten Kursen auf Udemy! Kursteilnehmer bekommen auch ein Swift Cheatsheet (Swift Grundlagen) kostenlos mit dazu.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Du lernst die unterschiedlichsten Bereiche von iOS kennen und lernst, wie Du mit Swift auch umfangreichere Projekte realisierst. Dabei bleiben aber natürlich auch Einsteiger nicht auf der Strecke. Die erste App legt die Grundlagen rund um Xcode, iOS-Entwicklung und das AutoLayout. Die weiteren Apps führen Dich in immer mehr Klassen, Bibliotheken und Frameworks ein.</p>\n\n\n\n<p>Zusätzlich gibt es <strong class=\"redactor-inline-converted\">3 Bonuskapitel</strong> zu folgenden Themen:</p>\n\n\n\n\n\n<ul><li>Unit-Testing mit Xcode</li><li>Versionsverwaltung mit Git</li><li>Apps im AppStore einreichen</li></ul>\n\n<p><strong class=\"redactor-inline-converted\"><br>Details zu den einzelnen Kursthemen:</strong><br></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p><em>**Xcode &amp; Autolayout Grundlagen**</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>In der erste App stehen Grundlagen rund um Xcode und iOS im Vordergrund. Als Einsteiger lernst Du die Arbeit mit dem Cocoa Touch Framework kennen und nutzt <em>IBOutlets</em> und <em>IBActions</em>. Auch als fortgeschrittener findest Du mit AutoLayout Informationen zu einem wichtiges Thema.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p> <em>**UITableView &amp; Segue Grundlagen**</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Die RezepteApp führt Dich in in die UITableView ein. Du definierst eine eigene <em>UITableViewDataSource</em> sowie einen <em>UITableViewDelegate</em>. Die Protokolle werden implementiert und im Storyboard eine zusätzlich View angelegt. Die wird über <em>Segue</em> erreichbar gemacht. Außerdem definieren wir ein<em>Datamodel</em>, über das Rezepte in der App repräsentiert werden.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p> <em>**UICollectionView und adaptive Interface mit SizeClasses**</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Der ImageViewer basiert auf der Klasse UICollectionView. Du lernst sie zu nutzen und über die <em>UICollectionViewDataSource</em> und <em>UICollectionViewDelegate</em>Protokolle anzubinden. Ebenso sind UIImage und die UIImageView die Basis zur Darstellung von Bildern. Gemeinsam erstellen wir dafür eine angepasste <em>UICollectionViewCell</em>. Ein wichtiges Thema sind die SizeClasses in iOS. Wir erstellen für den ImageViewer ein adaptives Layout, dass für iPad und iPhones gesondert optimiert wird. Dazu nutzen wir Traitcollections.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p> <em>**RESTful APIs, JSON, Grand Central Dispatch und NSOperationQueue**</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Apps bekommen eine ganz neue Dimension, wenn sie Daten aus dem Netz verarbeiten. Ein beliebter Weg sind RESTful APIs, die zum Beispiel Daten im<em>JSON-Format</em> zurückgeben. Im SynonyMaster rufen wir von openthesaurus Synonyme für eingegebene Wörter ab. Dabei lernst Du die <em>asynchrone Datenverarbeitung</em> kennen. Wir nutzen Grand Central Dispatch (GCD) sowie die NSOperationQueue. Mit <em>NSJSONSerialization</em> verarbeiten wir schließlich die Antwortdaten. Die Hintergrundaktivität zeigen wir mit einer <em>UIActivitiyIndicatorView</em> an.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p> <em>**CoreData**</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Die Einkaufsliste steht voll und ganz im Zeichen von CoreData. Du lernst am Beispiel einer App für den Einkauf Daten <em>persistent</em> zu speichern. Wir erstellen eine Verwaltung für Einkaufslisten, auf denen jeweils mehrere Produkte gespeichert werden können. Dazu legen wir die <em>Entitäten</em> an, erzeugenManagedObjects, implementieren die typischen <em>CRUD</em>-Aktionen (Create, Update, Remove) und verwenden <em>Relationen</em>. Außerdem kommt ein <em>Bridging-Header</em> zum Einsatz und Du legst über <em>Closures</em> eigene <em>Completion-Handler</em> fest.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p> <em>**CADisplayLink, NSUserDefaults und diverse UI-Elemente**</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Die TimerApp nutzt die Klasse CADisplayLink, um einen Timer zu realisieren. Er kann gestoppt, pausiert und zurückgesetzt werden. Außerdem nutzen wir verschiedene UIElemente wie die UIPickerView inkl. entsprechender UIPickerViewDataSource. Darüber hinaus kommen UIStepper und dieUIProgressView zum Einsatz. In den NSUserDefaults speichern wir die aktuelle Timereinstellung und benachrichtigen den Benutzer nach Ablauf mit einem UIAlertController.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p> <em>**SpriteKit**</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Der Würfelbecher ist ein Beispiel für SpriteKit. Du bekommst einen Überblick über das Framework und lernst den Zusammenhang zwischen<em>GameScene</em>, <em>Nodes</em> und <em>Actions</em> kennen. Außerdem verwenden wir die Schwerkraft, legen eigene Nodes bei Berührung an (Würfel in den Becher) und starten wenn der Benutzer sein Gerät schüttelt (<em>MotionShake</em> Events) das Würfeln. Das Ergebnis blendest Du in einer neuen GameScene ein.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p> <em>**WordPress Backend, Teilen auf Facebook und Twitter**</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>In dieser App arbeitest Du erneut mit <em>RESTful APIs</em>. Allerdings erzeugst Du mit WordPress ein eigenes Backend für Deine App. Du lernst die Inhalte der App mit einfachen Mitteln selbst zu verwalten. Gerade für redaktionelle Inhalte ein Muss. Die Daten werden per<em> JSON im Hintergrund</em> abgerufen. Außerdem lernst Du mit den <em>Property-Lists</em> wie der <em>Info (.plist)</em> umzugehen und sie zur Konfiguration einzusetzen. Darüber hinaus erstellst Du eine eigene<em>EditAction</em> für die <em>UITableViewCell</em> und lernst, wie Inhalte auf <em>Twitter</em> und <em>Facebook</em> geteilt werden können.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p><em>**MapKit und UISplitViewController**</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Die HappyPlaces-App besteht aus zwei Teilen. Im Vordergrund steht die Nutzung von MapKit. Du zeigst Orte auf einer Karte an, ermöglichst über den <em>UISearchController</em> die Volltextsuche nach Orten, Ländern und Straßen und lernst Koordination per <em>Touchgeste</em> abzufragen. Auch die eigene Position wird bestimmt und auf der Karte dargestellt. Der zweite Teil der App ist der UISplitViewController. Er wird genutzt, um zur Verfügung stehenden Platz auf allen Geräten fast automatisch bestmöglich zu nutzen.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p><em>**UIBezierPath – eine animierte View**</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Der TabataTimer ist eine umfassende App, in der Du sogar eigene View-Elemente erzeugst. Dazu nutzen wir einen UIBezierPath, mit dem wir eine eigene Fortschrittsanzeigen bauen (einen Kreis, der sich langsam füllt). Der Fortschritt wird mit einer CABasicAnimation animiert dargestellt. Ergänzend lernst Du auch mit NSTimer zu arbeiten und damit eigene Timer zu erzeugen. Auch hier realisieren wir wieder die Möglichkeit den Timer zu pausieren.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p><em>**XML-Verarbeitung und UITabBarController**</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Der RSSReader ist genau das – ein Reader für RSS-Feeds. Diese werden typischerweise von Blogs und anderen redaktionellen Webseiten bereitgestellt. Die App zeigt die letzten Beiträge in einer UICollectionView an. Dazu passen wir das <em>UICollectionViewFlowLayout</em> an. Der NSXMLParser bildet das Herzstück der XML-Verarbeitung, welche ebenfalls im Hintergrund stattfindet. Auch Bilder werden abgerufen und in der <em>CollectionView</em> anzeiget. Außerdem kommt ein UITabBarController zum Einsatz, Du lernst auf <em>Geräte-Rotation</em> zu reagieren und eine WebView zu nutzen.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p><em>**Audiowiedergabe und Aufnahmen**</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Das Soundboard nutzt vorbereitete Musikstücke und bietet Buttons, um sie abzuspielen. Insgesamt habe sind 9 Sounds von freesound (.org) zum Download bereit, die in der App genutzt werden. Ein wichtiger Part ist daher die Audiowiedergabe mit iOS. Darüber hinaus erstellst Du Audioaufnahmen mit dem Rekorder, spielst diese ab und lernst den Audiorecorder-Delegate kennen.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p><em>**Push-Notifications**</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Viele Mannschaften bieten eigene Apps. Darüber stehen natürlich neueste Nachrichten bereit. Noch wichtiger sind aber Benachrichtigungen während der laufenden Spiele. Der aktuelle Spielstand wir abgerufen und der Benutzer per Push-Nachrichten bei Ereignissen sowie Anstoß und Abpfiff alarmiert. Diese Funktionalität bildet die LiveErgebnisse-App ab. Du lernst den Apple Push Notification Service (APNs) zu verstehen, verwendest eigene Push Notifications verwenden (per APN), wir erstellen die benötigten Zertifikate und versenden Push-Nachrichten. Der Spielstand wird per JSON abgerufen. Außerdem lernst Du <em>NSNotifications</em> kennen.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p><em>**In-App Einkäufe**</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Über In-App Einkäufe werden viele Apps monetarisiert. Das Freemium Modell siehst vor eine kostenlose Basis bereitzustellen. Zusätzlich gibt es Premiuminhalte, die erst nach einer Zahlung freigeschaltet werden. In der PremiumRezepte-App lernst Du In-App Einkäufe anzubieten. Gemeinsam hinterlegen wir die kostenpflichtigen Inhalte, sperren aber den Zugang. Dieser wird schließlich per In-App Purchase (IAP) wieder freigeschaltet und der Einkauf gespeichert.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p><em>**CloudKit als Backend**</em></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>Cloudgram ist ein rudimentärer Clone von Instagram, der bewusst auf viel Funktionalität verzichtet. Im Vordergrund steht keine 1:1 Kopie, sondern das CloudKit Backend. Dieser populäre Service dient als Backend für die App. Du verwendest die Kamera und PhotoLibrary als Quelle für Bilder. Die werden hochgeladen und auf den Servern von Apple gespeichert. Darüber hinaus lernst Du Pull-To-Refresh in eine UITableView zu integrieren und Asset zu verwenden.</p>", 
    "end_date": null, 
    "title": "Swift 2.2 und iOS9 - App Entwicklung für iPhone und iPad", 
    "price": "50.00", 
    "instructors": "Jan Brinkmann", 
    "commitment": "28 hours", 
    "cover_url": "https://udemy-images.udemy.com/course/750x422/537812_0365_3.jpg", 
    "course_url": "https://www.udemy.com/ios-mit-swift-am-beispiel-von-praxisnahen-apps/", 
    "currency": "USD", 
    "subject_name": [
        "Mobile Apps"
    ], 
    "duration": null, 
    "language_name": [
        "Others"
    ], 
    "provider_name": [
        "udemy"
    ], 
    "start_date": "2015-06-26T08:42:25Z"
}