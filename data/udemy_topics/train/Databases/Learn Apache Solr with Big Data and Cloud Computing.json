{
    "selfpaced": true, 
    "topic_name": [
        "Development"
    ], 
    "description": "<p>  \t      Solr is the popular, blazing fast open source enterprise search platform from the Apache LuceneTMproject. Its major features include powerful full-text search, hit highlighting, faceted search, near real-time indexing, dynamic clustering, database integration, rich document (e.g., Word, PDF) handling, and geospatial search. Solr is highly reliable, scalable and fault tolerant, providing distributed indexing, replication and load-balanced querying, automated failover and recovery, centralized configuration and more. Solr powers the search and navigation features of many of the world&#039;s largest internet sites.  </p>  <p>  \t      Solr is written in Java and runs as a standalone full-text search server within a servlet container such as Jetty. Solr uses the Lucene Java search library at its core for full-text indexing and search, and has REST-like HTTP/XML and JSON APIs that make it easy to use from virtually any programming language. Solr&#039;s powerful external configuration allows it to be tailored to almost any type of application without Java coding, and it has an extensive plugin architecture when more advanced customization is required.  </p>  <h4><strong style=\"\">Solr Features</strong></h4>  <p>  \t      Solr is a standalone enterprise search server with a REST-like API. You put documents in it (called &quot;indexing&quot;) via XML, JSON, CSV or binary over HTTP. You query it via HTTP GET and receive XML, JSON, CSV or binary results.  </p>  <ul style=\"\">  \t<li>Advanced Full-Text Search Capabilities</li>  \t<li>Optimized for High Volume Web Traffic</li>  \t<li>Standards Based Open Interfaces - XML, JSON and HTTP</li>  \t<li>Comprehensive HTML Administration Interfaces</li>  \t<li>Server statistics exposed over JMX for monitoring</li>  \t<li>Linearly scalable, auto index replication, auto failover and recovery</li>  \t<li>Near Real-time indexing</li>  \t<li>Flexible and Adaptable with XML configuration</li>  \t<li>Extensible Plugin Architecture</li>  </ul>  <h4>Solr Uses the LuceneTM Search Library and Extends it!</h4>  <ul style=\"\">  \t<li>A Real Data Schema, with Numeric Types, Dynamic Fields, Unique Keys</li>  \t<li>Powerful Extensions to the Lucene Query Language</li>  \t<li>Faceted Search and Filtering</li>  \t<li>Geospatial Search with support for multiple points per document and geo polygons</li>  \t<li>Advanced, Configurable Text Analysis</li>  \t<li>Highly Configurable and User Extensible Caching</li>  \t<li>Performance Optimizations</li>  \t<li>External Configuration via XML</li>  \t<li>An AJAX based administration interface</li>  \t<li>Monitorable Logging</li>  \t<li>Fast near real-time incremental indexing and index replication</li>  \t<li>Highly Scalable Distributed search with sharded index across multiple hosts</li>  \t<li>JSON, XML, CSV/delimited-text, and binary update formats</li>  \t<li>Easy ways to pull in data from databases and XML files from local disk and HTTP sources</li>  \t<li>Rich Document Parsing and Indexing (PDF, Word, HTML, etc) using Apache Tika</li>  \t<li>Apache UIMA integration for configurable metadata extraction</li>  \t<li>Multiple search indices</li>  </ul>  <h4>Detailed Features</h4>  <h4>Schema</h4>  <ul style=\"\">  \t<li>Defines the field types and fields of documents</li>  \t<li>Can drive more intelligent processing</li>  \t<li>Declarative Lucene Analyzer specification</li>  \t<li>Dynamic Fields enables on-the-fly addition of new fields</li>  \t<li>CopyField functionality allows indexing a single field multiple ways, or combining multiple fields into a single searchable field</li>  \t<li>Explicit types eliminates the need for guessing types of fields</li>  \t<li>External file-based configuration of stopword lists, synonym lists, and protected word lists</li>  \t<li>Many additional text analysis components including word splitting, regex and sounds-like filters</li>  \t<li>Pluggable similarity model per field</li>  </ul>  <h4>Query</h4>  <ul style=\"\">  \t<li>HTTP interface with configurable response formats (XML/XSLT, JSON, Python, Ruby, PHP, Velocity, CSV, binary)</li>  \t<li>Sort by any number of fields, and by complex functions of numeric fields</li>  \t<li>Advanced DisMax query parser for high relevancy results from user-entered queries</li>  \t<li>Highlighted context snippets</li>  \t<li>Faceted Searching based on unique field values, explicit queries, date ranges, numeric ranges or pivot</li>  \t<li>Multi-Select Faceting by tagging and selectively excluding filters</li>  \t<li>Spelling suggestions for user queries</li>  \t<li>More Like This suggestions for given document</li>  \t<li>Function Query - influence the score by user specified complex functions of numeric fields or query relevancy scores.</li>  \t<li>Range filter over Function Query results</li>  \t<li>Date Math - specify dates relative to &quot;NOW&quot; in queries and updates</li>  \t<li>Dynamic search results clustering using Carrot2</li>  \t<li>Numeric field statistics such as min, max, average, standard deviation</li>  \t<li>Combine queries derived from different syntaxes</li>  \t<li>Auto-suggest functionality for completing user queries</li>  \t<li>Allow configuration of top results for a query, overriding normal scoring and sorting</li>  \t<li>Simple join capability between two document types</li>  \t<li>Performance Optimizations</li>  </ul>  <h4>Core</h4>  <ul style=\"\">  \t<li>Dynamically create and delete document collections without restarting</li>  \t<li>Pluggable query handlers and extensible XML data format</li>  \t<li>Pluggable user functions for Function Query</li>  \t<li>Customizable component based request handler with distributed search support</li>  \t<li>Document uniqueness enforcement based on unique key field</li>  \t<li>Duplicate document detection, including fuzzy near duplicates</li>  \t<li>Custom index processing chains, allowing document manipulation before indexing</li>  \t<li>User configurable commands triggered on index changes</li>  \t<li>Ability to control where docs with the sort field missing will be placed</li>  \t<li>&quot;Luke&quot; request handler for corpus information</li>  </ul>  <h4>Caching</h4>  <ul style=\"\">  \t<li>Configurable Query Result, Filter, and Document cache instances</li>  \t<li>Pluggable Cache implementations, including a lock free, high concurrency implementation</li>  \t<li>Cache warming in background</li>  \t<li>When a new searcher is opened, configurable searches are run against it in order to warm it up to avoid slow first hits. During warming, the current searcher handles live requests.</li>  \t<li>Autowarming in background</li>  \t<li>The most recently accessed items in the caches of the current searcher are re-populated in the new searcher, enabling high cache hit rates across index/searcher changes.</li>  \t<li>Fast/small filter implementation</li>  \t<li>User level caching with autowarming support</li>  </ul>  <h4>SolrCloud</h4>  <ul style=\"\">  \t<li>Centralized Apache ZooKeeper based configuration</li>  \t<li>Automated distributed indexing/sharding - send documents to any node and it will be forwarded to correct shard</li>  \t<li>Near Real-Time indexing with immediate push-based replication (also support for slower pull-based replication)</li>  \t<li>Transaction log ensures no updates are lost even if the documents are not yet indexed to disk</li>  \t<li>Automated query failover, index leader election and recovery in case of failure</li>  \t<li>No single point of failure</li>  </ul>  <h4>Admin Interface</h4>  <ul style=\"\">  \t<li>Comprehensive statistics on cache utilization, updates, and queries</li>  \t<li>Interactive schema browser that includes index statistics</li>  \t<li>Replication monitoring</li>  \t<li>SolrCloud dashboard with graphical cluster node status</li>  \t<li>Full logging control</li>  \t<li>Text analysis debugger, showing result of every stage in an analyzer</li>  \t<li>Web Query Interface w/ debugging output</li>  \t<li>Parsed query output</li>  \t<li>Lucene explain() document score detailing</li>  \t<li>Explain score for documents outside of the requested range to debug why a given document wasn&#039;t ranked higher.</li>  </ul>", 
    "end_date": null, 
    "title": "Learn Apache Solr with Big Data and Cloud Computing", 
    "price": "20.00", 
    "instructors": "QScutter Tutorials", 
    "commitment": "5 hours", 
    "cover_url": "https://udemy-images.udemy.com/course/750x422/273518_f4c1_2.jpg", 
    "course_url": "https://www.udemy.com/learn-apache-solr-with-big-data-and-cloud-computing/", 
    "currency": "USD", 
    "subject_name": [
        "Databases"
    ], 
    "duration": null, 
    "language_name": [
        "English"
    ], 
    "provider_name": [
        "udemy"
    ], 
    "start_date": "2014-08-02T16:53:57Z"
}