{
    "selfpaced": true, 
    "topic_name": [
        "Development"
    ], 
    "description": "<p><strong>BEST COURSE CHOICE for beginners and intermediate C# developers who want to learn about the Task Parallel Library and Parallel LINQ, and take their asynchronous programming skills to the next level.</strong><br></p><p>Do you know how to write robust multi-threaded C# code that does not crash?</p><p>Yeah, I thought I did too. Ten years ago I built code for an RFID-enabled supermarket shelf. But my code was very unstable, and the shelf required many reboots to run successfully. Needless to say, the client was not amused.</p><p>So what was the problem? This was years before the Task Parallel Library and Parallel LINQ were released. So I had to do everything manually: locking shared fields, synchronising threads, you name it. And of course I had overlooked a few bits of code that were not thread-safe.</p><p><strong>Don't let this happen to you!</strong></p><p>Today we have beautiful libraries for writing asynchronous C#, and there is simply <strong>no excuse</strong> for writing bad code. In this course I will teach you how to write rock-solid code using Tasks and Parallel LINQ that works perfectly on your first try.</p><p>I wrote a multi-threaded conversion utility a few months ago that successfully migrated 100,000 documents from SharePoint 2010 to SharePoint 2013. The program worked flawlessly the first time because I used PLINQ.</p><p><strong>Sound good?</strong></p><p>Writing multi-threaded code by hand <strong>is </strong><strong>hard</strong>. I’ll prove it to you by showing you some code that exchanges data between two threads. You will be surprised how difficult it is to do this reliably.</p><p>But then I’ll show you how trivially easy it is to write asynchronous C# code using the Task Parallel Library and Parallel LINQ. These amazing frameworks allow anyone to write robust multi-threaded code that can take a beating.</p><p>By the end of the course you will be fluent in both the Tasks Parallel Library and Parallel LINQ.</p><p><strong>Why should you take this course?</strong></p><p>You should take this course if you are a beginner or intermediate C# developer and want to take your skills to the next level. Working with Tasks and Parallel LINQ might sound complicated, but all of my lectures are very easy to follow, and I explain all topics with clear code and many instructive diagrams. You'll have no trouble following along.</p><p>Or maybe you're working on a critical asynchronous section of C# code in a lage project, and need to make sure your code scales reliably over multiple CPU cores? The tips and tricks in this course will help you immensely.</p><p>Or maybe you're preparing for a C# related job interview? This course will give you an excellent foundation to answer any asynchronous programming questions they might throw at you.</p><p><strong>30 day money-back guarantee</strong></p><p><em>This course comes with an unconditional, Udemy backed, 30-day money-back guarantee. If you are dissatisfied with the course for any reason, simply request a refund and get your full purchase amount back, no questions asked.</em></p><p><strong>Act now</strong></p><p>This course today contains over 3 hours of video content and I am adding new material every month. Enrol now to benefit from the current price and get free lifelong access to all future materials.</p><p><strong>Enrol now!</strong></p>", 
    "end_date": null, 
    "title": "Write Asynchronous C# Code With Tasks and PLINQ", 
    "price": "40.00", 
    "instructors": "Mark Farragher", 
    "commitment": "3 hours", 
    "cover_url": "https://udemy-images.udemy.com/course/750x422/614988_c9ab_2.jpg", 
    "course_url": "https://www.udemy.com/write-asynchronous-csharp-code-with-task-parallel-library-and-plinq/", 
    "currency": "USD", 
    "subject_name": [
        "Programming Languages"
    ], 
    "duration": null, 
    "language_name": [
        "English"
    ], 
    "provider_name": [
        "udemy"
    ], 
    "start_date": "2015-09-17T17:03:19Z"
}