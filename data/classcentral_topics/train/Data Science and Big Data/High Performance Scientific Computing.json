{
    "selfpaced": false, 
    "topic_name": [
        "Data Science and Big Data"
    ], 
    "description": "\n\n                    \n                                            \n                            PSA: This Course will no longer be available June 30th 2016 onwards\n                            Coursera announced that they will be shutting off their old platform on June 30th. Over  400 courses that are part\n                                of the old stack will be no longer be available. You can find the  complete list here.\n                            \n                            \n\n                            \n                                Read this guide to learn how to download this course before the old platform shuts down. \n\n                                The guide provides two ways to download the courses - Chrome Plugin and Python Script. Depending on which method you use, check the appropriate sections below for further details.\n                            \n                            \n                            \n                                To download this course you need to be enrolled in the course.\n                                                                    You can enroll for the course here:\n                                    https://www.coursera.org/course/scicomp\n                                                            \n\n                            Chrome Plugin\n\n                                                            You can download the course materials for this course by visiting the following url (you need to be logged in):\n                                                                        https://class.coursera.org/scicomp-003/lecture\n                                \n                            \n                            Python Script\n                            \n                                                                For the python script to work you will need a class name. Pick one from below:\n                                                                    scicomp-001\n                                                                    scicomp-002\n                                                                    scicomp-003\n                                \n                                \n                                If more than one class name below, pick the last one. If the script fails, pick the one above that and try again. Not all of these class names are guranteed to work.\n\n\n                            \n\n\n\n\n\n\n                        \n                    \n                    Computation and simulation are increasingly important in all aspects of\n    science and engineering. At the same time writing efficient computer programs\n    to take full advantage of current computers is becoming increasingly difficult.\n    Even laptops now have 4 or more processors, but using them all to solve\n    a single problem faster often requires rethinking the algorithm to introduce\n    parallelism, and then programming in a language that can express this parallelism. \n    Writing efficient programs also requires some knowledge of machine arithmetic,\n    computer architecture, and memory hierarchies.\nAlthough parallel computing will be covered, this is not a class\n    on the most advanced techniques for using supercomputers, which these days\n    have tens of thousands of processors and cost millions of dollars. Instead,\n    the goal is to teach tools that you can use immediately on your own laptop,\n    desktop, or a small cluster. Cloud computing will also be discussed, and\n    students who don't have a multiprocessor computer of their own will still\n    be able to do projects using Amazon Web Services at very low cost.\nAlong the way there will also be discussion of software engineering tools\n    such as debuggers, unit testing, Makefiles, and the use of version control\n    systems. After all, your time is more valuable than computer time, and\n    a program that runs fast is totally useless if it produces the wrong results.\nHigh performance programming is also an important aspect of high\n    performance scientific computing, and so another main theme of the course\n    is the use of basic tools and techniques to improve your efficiency as\n    a computational scientist.\n\n                                            Syllabus\n                        The use of a variety of languages and techniques will be integrated throughout\n    the course as much as possible, rather than taught linearly. The topics\n    below will be covered at an introductory level, with the goal of learning\n    enough to feel comfortable starting to use them in your everyday work.\n    Once you've reached that level, abundant resources are available on the\n    web to learn the more advanced features that are most relevant for you.\n\n    Working at the command line in Unix-like shells (e.g. Linux or a Mac OSX\n        terminal).\n    Version control systems, particularly git, and the use of Github and Bitbucket\n        repositories.\n    Work habits for documentation of your code and reproducibility of your\n        results.\n    Interactive Python using IPython, and the IPython Notebook.\n    Python scripting and its uses in scientific computing.\n    Subtleties of computer arithmetic that can affect program correctness.\n    How numbers are stored: binary vs. ASCII representations, efficient I/O.\n    Fortran 90, a compiled language that is widely used in scientific computing.\n    Makefiles for building software and checking dependencies.\n    The high cost of data communication.  Registers, cache, main memory,\n        and how this memory hierarchy affects code performance. \n    OpenMP on top of Fortran for parallel programming of shared memory computers,\n        such as a multicore laptop.\n     MPI on top of Fortran for distributed memory parallel programming,\n        such as on a cluster.\n    Parallel computing in IPython.\n    Debuggers, unit tests, regression tests, verification and validation of\n        computer codes.\n    Graphics and visualization of computational results using Python.\n\n                                    ", 
    "end_date": "2015-05-01T00:00:00Z", 
    "title": "High Performance Scientific Computing", 
    "price": 0, 
    "instructors": "Randall J. LeVeque", 
    "institution_name": [
        "University of Washington"
    ], 
    "commitment": "5-10 hours", 
    "subject_name": [
        "Computer Science"
    ], 
    "course_url": "https://www.coursera.org/course/scicomp", 
    "duration": "10 weeks", 
    "language_name": [
        "English"
    ], 
    "provider_name": [
        "Coursera"
    ], 
    "start_date": "2015-02-20T00:00:00Z"
}