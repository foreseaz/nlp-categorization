{
    "selfpaced": false, 
    "topic_name": [
        "Mobile Development"
    ], 
    "description": "\n\n                    \n                    \n                    The confluence of multi-core and distributed-core processors, inexpensive mass storage, ubiquitous wireless connectivity, and commodity software platforms is driving the need for software engineers and programmers who understand how to develop concurrent and networked software for mobile devices that connect to cloud computing platforms. Despite many improvements in processors, storage, and networks, however, developing quality software on-time and on-budget remains hard. Moreover, developing high quality reusable  concurrent and networked software apps and services is even harder.  The principles, methods, and skills required to develop such software are best learned by attaining mastery of patterns, pattern languages, and frameworks.\r\nA pattern describes a reusable solution to a common problem that arises within a particular context. When related patterns are woven together they form a pattern language that defines a vocabulary and a process for the orderly resolution of software development problems. A framework is an integrated set of components that collaborate to provide a reusable architecture for a family of related apps or services.  Frameworks can also be viewed as concrete realizations of pattern languages that facilitate direct reuse of detailed design and source code.\r\nThis MOOC describes by example how to apply patterns, pattern languages, and frameworks to alleviate the complexity of developing concurrent and networked software for mobile devices via the use of object-oriented design techniques, Javaprogramming language features, and Android middleware. An extended case study project will be used throughout the MOOC to showcase pattern-oriented software design and programming techniques for concurrent and networked mobile devices and clouds.\r\nNote: This course is part of a trans-institution sequence of MOOCs entitled Mobile Cloud Computing with Android\r\nThis MOOC and two others, taught by Dr. Adam Porter from the University of Maryland and Dr. Jules White from Vanderbilt University, have been designed to complement each other as part of the first trans-institution sequence of MOOCs taught on the Coursera platform, structured as follows:\r\n \r\n\r\nThe University of Maryland MOOC, Programming Mobile Applications for Android Handheld Systems, will run from January 21st - April 28th. It focuses on the design and programming of user-facing applications.  \r\nThe first Vanderbilt MOOC in the sequence, Programming Mobile Services for Android Handheld Systems, will run from May 12th - July 6th. It focuses on middleware systems programming topics, such as synchronous and asynchronous concurrency models, background service processing, structured data management, local inter-process communication and networking, and integration with cloud-based services.  \r\nThe second Vanderbilt MOOC in the sequence, Programming Cloud Services for Android Handheld Systems, will be run from July 21st - September 29th. It focuses on how to connect Android mobile devices to cloud computing and data storage resources, essentially turning a device into an extension of powerful cloud-based services on popular cloud computing platforms, such as Google App Engine and Amazon EC2. \r\nThe final Capstone project MOOC in the sequence will run from October 1st - November 3rd. For this first offering of the Mobile Cloud Computing with Android (MoCCA) Specialization only students in the Signature Track who receive a \"Verified Certificate with Distinction\" are eligible to enroll in the Capstone project course.\r\n\r\n \r\nSome of the programming assignments and the iRemember integrative project for these MOOCs will be coordinated.  \r\nIf you just want to take some of the MOOCs in this sequence or take them all in different order you’re certainly welcome to do so, and you’ll still learn a lot. However, if you take all the MOOCs in this sequence in the order presented you’ll gain a deeper, end-to-end understanding of handheld systems, their applications and services, as well as their integration into the cloud.\n\n                                            Syllabus\n                        The course is organized into the following sections:\r\n\r\nSection 0: Course Introduction\r\n\r\nPart 1: Overview of Mobile Cloud Computing with Android\r\nPart 2:Course Structure and Topics\r\nPart 3: Course Prerequisites and Learning Strategies\r\nPart 4: Overview of Patterns and Frameworks\r\n\r\n\r\nSection 1: Android Concurrency\r\n\r\nModule 1: Concurrency Motivations and Challenges\r\n\r\nPart 1: Concurrency Motivations\r\nPart 2: Concurrency Challenges\r\n\r\n\r\nModule 2: Java Concurrency Mechanisms\r\n\r\nPart 1: Overview of Java Threads (Part 1)\r\nPart 2: Overview of Java Threads (Part 2)\r\nPart 3: Motivating Java Synchronization &amp; Scheduling Mechanisms\r\nPart 4: Java Synchronization and Scheduling Classes\r\nPart 5: Java ReentrantLock\r\nPart 6: Java ReentrantReadWriteLock\r\nPart 7: Java Semaphore\r\nPart 8: Java ConditionObject\r\nPart 9: Java CountDownLatch\r\nPart 10: Java Synchronization and Scheduling Example\r\nPart 11: Java Built-in Monitor Objects\r\n\r\n\r\nModule 3: Android Concurrency Frameworks\r\n\r\nPart 1: Overview of Android Concurrency Frameworks and Idioms\r\nPart 2: Android Looper\r\nPart 3: Overview of Android Handler\r\nPart 4: Posting and Processing Runnables to Android Handler\r\nPart 5: Sending and Handling Messages to Android Handler\r\nPart 6: The AsyncTask Framework (Part 1)\r\nPart 7: The AsyncTask Framework (Part 2)\r\nPart 8: Programming with Android Concurrency Frameworks (Part 1)\r\nPart 9: Programming with Android Concurrency Frameworks (Part 2)\r\n\r\n\r\n\r\n\r\nSection 2: Android Services and Security\r\n\r\nModule 1: Android Services and IPC\r\n\r\nPart 1: Overview of Started and Bound Services\r\nPart 2: Programming Started Services (Part 1)\r\nPart 3: Programming Started Services (Part 2)\r\nPart 4: Android IntentService\r\nPart 5: Activity and Service Communication\r\nPart 6: Service to Activity Communication Using Android Messenger\r\nPart 7: Programming Bound Services with Messengers (Part 1)\r\nPart 8: Programming Bound Services with Messengers (Part 2)\r\nPart 9: Programming Bound Services with AIDL\r\n\r\n\r\nModule 2: Android App Security and Risks\r\n\r\nPart 1: Traditional App Accounts\r\nPart 2: Mobile vs. Traditional App Accounts\r\nPart 3: App Account Mapping to Linux Users\r\nPart 4: Apps Lie &amp; Steal\r\nPart 5: How Android Protects Apps\r\nPart 6: What Android Doesn't Protect\r\nPart 7: Avoid Storing Sensitive Data in Public Locations\r\nPart 8: Risks of Insecure File Permissions\r\n\r\nModule 3: Building More Secure Android Apps\r\n\r\nPart 0: The Challenge of Secure Coding\r\nPart 1: Security Vulnerability Walkthrough\r\nPart 2: Principles of Secure Abstractions\r\nPart 3: Avoid Coupling Data &amp; Security State\r\nPart 4: Build Abstractions that are Hard to Use Insecurely\r\nPart 5: Bound &amp; Strongly Type Security State\r\nPart 6: Avoid Conditional Logic in Secure Pathways\r\nPart 7: Prevent Secure Pathways from Being Broken at Runtime\r\nPart 8: Privilege Escalation Concepts\r\nPart 9: Privilege Escalation Scenario\r\nPart 10: Privilege Escalation Code Walkthrough\r\nPart 11: Privilege Escalation Fixes\r\nPart 12: User Interface Attacks\r\nPart 13: Cross-platform User Interface Attacks\r\n\r\n\r\nSection 3: Concurrency and Communication Patterns in Android\r\n\r\nModule 1: Coordinating Concurrent Access to Shared Data\r\n\r\nPart 1: The Monitor Object Pattern (Part 1)\r\nPart 2: The Monitor Object Pattern (Part 2)\r\n\r\nModule 2: Activating Services on Demand\r\n\r\nPart 1: The Activator Pattern (Part 1)\r\nPart 2: The Activator Pattern (Part 2)\r\n\r\nModule 3: Passing Commands to Services\r\n\r\nPart 1: The Command Processor Pattern (Part 1)\r\nPart 2: The Command Processor Pattern (Part 2)\r\n\r\nModule 4: Automating Marshaling and Demarshaling of Data\r\n\r\nPart 1: The Proxy Pattern (Part 1)\r\nPart 2: The Proxy Pattern (Part 2)\r\n\r\nModule 5: Supporting Object-Oriented Remote Method Calls\r\n\r\nPart 1: The Broker Pattern (Part 1)\r\nPart 2: The Broker Pattern (Part 2)\r\n\r\nModule 6: Decoupling Producers from Consumers\r\n\r\nPart 1: The Publisher-Subscriber Pattern (Part 1)\r\nPart 2: The Publisher-Subscriber Pattern (Part 2)\r\n\r\nModule 7: Ensuring Only One Looper Per Thread\r\n\r\nPart 1: The Thread-Specific Storage Pattern\r\n\r\nModule 8: Passing Message Requests Between Threads\r\n\r\nPart 1: The Active Object Pattern\r\n\r\nModule 9: Decoupling Synchronous &amp; Synchronous Processing\r\n\r\nPart 1: the Half-Sync/Half-Async Pattern\r\n\r\n\r\n\r\n\r\nThroughout the MOOC we'll focus on pattern-oriented software architecture, with an emphasis on concurrent and networked programming in the context of Android middleware systems programming mechanisms, such as synchronous and asynchronous concurrency models, background service processing, storage and retrieval of structured data, and local inter-process communication (IPC) and networking. We illustrate by example how key pattern and framework concepts and relationships are applied in Android Services, Content Providers, Broadcast Receivers, and various secure local and remote IPC mechanisms from both an application and infrastructure perspective. Many code examples are shown throughout using Java, with a case study project used to reify the key points throughout all the modules in this section.\r\nThe PDF versions of all the slides used in the course will be available online as the videos become available on the course website.\n                                    ", 
    "end_date": "2014-07-07T00:00:00Z", 
    "title": "Pattern-Oriented Software Architectures: Programming Mobile Services for Android Handheld Systems", 
    "price": 0, 
    "instructors": "Douglas C. Schmidt", 
    "institution_name": [
        "Vanderbilt University"
    ], 
    "commitment": "8-12 hours", 
    "subject_name": [
        "Programming"
    ], 
    "course_url": "https://www.coursera.org/course/posa", 
    "duration": "8 weeks", 
    "language_name": [
        "English"
    ], 
    "provider_name": [
        "Coursera"
    ], 
    "start_date": "2014-05-12T00:00:00Z"
}