{
    "selfpaced": true, 
    "topic_name": [
        "Theoretical Computer Science"
    ], 
    "description": "\n\n                    \n                    \n                    Are you ready to conquer your next interview? To succeed, you need to understand the expectations. \nVirtually all technical interviews follow a very set pattern: you get asked a very specific type of question, you're required to have very specific knowledge, and you're expected to answer—and interact with your interviewer—in a very particular way. Knowing this in advance, and preparing accordingly, is the key to success. \n\nThis course was designed to give you what you need to ace a technical interview. Included are:\n\n - videos that walk you through the algorithms and data structures concepts commonly asked in technical interviews\n - an explanation of efficiency, and an explanation of how it relates to topics covered throughout the class\n - practice problems and quizzes to test your understanding\n - a mock interview with a breakdown explaining how interviewers expect you to explain your thought process\n - curated links to outside resources, including a special link to live practice interviewing with other Udacity students on Pramp \n - if you’re a Nanodegree student, a final project where you can answer interview questions and get feedback from a trained reviewer.\n\nThe goal of this course is to prepare you for a real technical interview, so we focus on the material you'll actually be expected to do.Why Take This Course?This course provides an introduction to topics that often show up on technical interviews. It is aimed at students who have never taken a course in algorithms and data structures, but want to learn the material. It can also be used to refresh on these topics for those who have seen them before. In addition to video explanations, there are plenty of examples and discussions of the intricacies of different approaches.\n\nThis course is distinct from other similar offerings on Udacity. It is a precursor to the “Intro to Algorithms” course, and complimentary to the Interviewing Course listed in most career-focused Nanodegrees. This course is focused on explaining the technical content that show up in interviews, while the other course is more centered on behavioral questions and how to act in an interview.\n\n                                            Syllabus\n                        **Introduction and Efficiency**\n\n - Start off with a basic introduction to topics covered in this course and the overall content structure, including an explanation of expected Python knowledge. \n - Then, dive in with the definition of efficiency in a computer science context, as well as an explanation of the notation commonly used to describe efficiency. Practice describing efficiency from code snippets.\n\n**List-Based Collections**\n\n - Learn the formal definition of a list in computer science, and see definitions and examples of list-based data structures, arrays, linked lists, stacks, and queues. \n - Examine the efficiency of common list methods, and practice using and manipulating these data structures.\n\n**Searching and Sorting**\n\n - Explore how to search and sort with list-based data structures, including binary search and bubble, merge, and quick sort. Examine the efficiency of each and learn how to use recursion in searching and sorting. \n - See and write examples of these methods, as well as more sorting algorithms like insertion sort.\n\n**Maps and Hashing**\n\n- Understand the concepts of sets, maps (dictionaries), and hashing. Examine common problems and approaches to hashing, and practice with examples of hash tables and hash maps.\n\n**Trees**\n\n - Learn the concepts and terminology associated with tree data structures. Investigate common tree types, such as binary search trees, heaps, and self-balancing trees. \n - See examples of common tree traversal techniques, examine the efficiency of traversals and common tree functions, and practice manipulating trees.\n\n**Graphs**\n\n - Examine the theoretical concept of a graph and understand common graph terms, coded representations, properties, traversals, and paths.  \n - Practice manipulating graphs and determining the efficiency associated with graphs.\n\n**Case Studies in Algorithms**\n\n - Explore famous computer science problems, specifically the Shortest Path Problem, the Knapsack Problem, and the Traveling Salesman Problem. \n - Learn about brute-force, greedy, and dynamic programming solutions to such problems.\n\n**Technical Interviewing Techniques**\n\n - Learn about the “algorithm” for answering common technical interviewing questions. See how to clarify and explain practice interview questions using the concepts taught in this course, and get tips for giving interviewers exactly what they’re looking for in an interview.\n\n**Practice Interview**\n\n - Use Pramp to meet with another Udacity student and get live technical interview practice.\n                                    ", 
    "end_date": "2016-05-19T00:00:00Z", 
    "title": "Technical Interview", 
    "price": 0, 
    "instructors": "", 
    "institution_name": [
        "Pramp"
    ], 
    "commitment": "6 hours", 
    "subject_name": [
        "Computer Science"
    ], 
    "course_url": "https://www.udacity.com/course/technical-interview--ud513?utm_medium=referral&utm_campaign=api", 
    "duration": "4 weeks", 
    "language_name": [
        "English"
    ], 
    "provider_name": [
        "Udacity"
    ], 
    "start_date": "2016-04-21T00:00:00Z"
}